// Generated by Haxe 4.1.4
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class HxOverrides {
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = true;
Math.__name__ = true;
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( _g ) {
			return null;
		}
	}
	static isFunction(f) {
		if(typeof(f) == "function") {
			return !(f.__name__ || f.__ename__);
		} else {
			return false;
		}
	}
	static compareMethods(f1,f2) {
		if(f1 == f2) {
			return true;
		}
		if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
			return false;
		}
		if(f1.scope == f2.scope && f1.method == f2.method) {
			return f1.method != null;
		} else {
			return false;
		}
	}
}
Reflect.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		if(x != null) {
			let _g = 0;
			let _g1 = x.length;
			while(_g < _g1) {
				let i = _g++;
				let c = x.charCodeAt(i);
				if(c <= 8 || c >= 14 && c != 32 && c != 45) {
					let nc = x.charCodeAt(i + 1);
					let v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
					if(isNaN(v)) {
						return null;
					} else {
						return v;
					}
				}
			}
		}
		return null;
	}
}
Std.__name__ = true;
class StringBuf {
	constructor() {
		this.b = "";
	}
}
StringBuf.__name__ = true;
class StringTools {
	static isSpace(s,pos) {
		let c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
}
StringTools.__name__ = true;
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class haxe_CallStack {
	static toString(stack) {
		let b = new StringBuf();
		let _g = 0;
		let _g1 = stack;
		while(_g < _g1.length) {
			let s = _g1[_g++];
			b.b += "\nCalled from ";
			haxe_CallStack.itemToString(b,s);
		}
		return b.b;
	}
	static subtract(this1,stack) {
		let startIndex = -1;
		let i = -1;
		while(++i < this1.length) {
			let _g = 0;
			let _g1 = stack.length;
			while(_g < _g1) if(haxe_CallStack.equalItems(this1[i],stack[_g++])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
			if(startIndex >= 0) {
				break;
			}
		}
		if(startIndex >= 0) {
			return this1.slice(0,startIndex);
		} else {
			return this1;
		}
	}
	static equalItems(item1,item2) {
		if(item1 == null) {
			if(item2 == null) {
				return true;
			} else {
				return false;
			}
		} else {
			switch(item1._hx_index) {
			case 0:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 0) {
					return true;
				} else {
					return false;
				}
				break;
			case 1:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 1) {
					return item1.m == item2.m;
				} else {
					return false;
				}
				break;
			case 2:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 2) {
					if(item1.file == item2.file && item1.line == item2.line && item1.column == item2.column) {
						return haxe_CallStack.equalItems(item1.s,item2.s);
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 3:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 3) {
					if(item1.classname == item2.classname) {
						return item1.method == item2.method;
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 4:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 4) {
					return item1.v == item2.v;
				} else {
					return false;
				}
				break;
			}
		}
	}
	static itemToString(b,s) {
		switch(s._hx_index) {
		case 0:
			b.b += "a C function";
			break;
		case 1:
			let _g = s.m;
			b.b = (b.b += "module ") + (_g == null ? "null" : "" + _g);
			break;
		case 2:
			let _g1 = s.column;
			let _g2 = s.line;
			let _g3 = s.file;
			let _g4 = s.s;
			if(_g4 != null) {
				haxe_CallStack.itemToString(b,_g4);
				b.b += " (";
			}
			b.b = (b.b += _g3 == null ? "null" : "" + _g3) + " line ";
			b.b += _g2 == null ? "null" : "" + _g2;
			if(_g1 != null) {
				b.b = (b.b += " column ") + (_g1 == null ? "null" : "" + _g1);
			}
			if(_g4 != null) {
				b.b += ")";
			}
			break;
		case 3:
			let _g5 = s.method;
			let _g6 = s.classname;
			b.b = (b.b += Std.string(_g6 == null ? "<unknown>" : _g6)) + ".";
			b.b += _g5 == null ? "null" : "" + _g5;
			break;
		case 4:
			let _g7 = s.v;
			b.b = (b.b += "local function #") + (_g7 == null ? "null" : "" + _g7);
			break;
		}
	}
}
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
		this.__skipStack = 0;
		let old = Error.prepareStackTrace;
		Error.prepareStackTrace = function(e) { return e.stack; }
		if(((native) instanceof Error)) {
			this.stack = native.stack;
		} else {
			let e = null;
			if(Error.captureStackTrace) {
				Error.captureStackTrace(this,haxe_Exception);
				e = this;
			} else {
				e = new Error();
				if(typeof(e.stack) == "undefined") {
					try { throw e; } catch(_) {}
					this.__skipStack++;
				}
			}
			this.stack = e.stack;
		}
		Error.prepareStackTrace = old;
	}
	details() {
		if(this.get_previous() == null) {
			let tmp = "Exception: " + this.get_message();
			let tmp1 = this.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		} else {
			let result = "";
			let e = this;
			let prev = null;
			while(e != null) {
				if(prev == null) {
					let result1 = "Exception: " + e.get_message();
					let tmp = e.get_stack();
					result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
				} else {
					let prevStack = haxe_CallStack.subtract(e.get_stack(),prev.get_stack());
					result = "Exception: " + e.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
				}
				prev = e;
				e = e.get_previous();
			}
			return result;
		}
	}
	__shiftStack() {
		this.__skipStack++;
	}
	get_message() {
		return this.message;
	}
	get_previous() {
		return this.__previousException;
	}
	get_native() {
		return this.__nativeException;
	}
	get_stack() {
		let _g = this.__exceptionStack;
		if(_g == null) {
			let value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			return _g;
		}
	}
	setProperty(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			e.__skipStack++;
			return e;
		}
	}
}
haxe_Exception.__name__ = true;
class haxe_NativeStackTrace {
	static toHaxe(s,skip) {
		if(skip == null) {
			skip = 0;
		}
		if(s == null) {
			return [];
		} else if(typeof(s) == "string") {
			let stack = s.split("\n");
			if(stack[0] == "Error") {
				stack.shift();
			}
			let m = [];
			let _g = 0;
			let _g1 = stack.length;
			while(_g < _g1) {
				let i = _g++;
				if(skip > i) {
					continue;
				}
				let line = stack[i];
				let matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
				if(matched != null) {
					let path = matched[1].split(".");
					if(path[0] == "$hxClasses") {
						path.shift();
					}
					let meth = path.pop();
					let file = matched[2];
					let line = Std.parseInt(matched[3]);
					let column = Std.parseInt(matched[4]);
					m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line,column));
				} else {
					m.push(haxe_StackItem.Module(StringTools.trim(line)));
				}
			}
			return m;
		} else if(skip > 0 && Array.isArray(s)) {
			return s.slice(skip);
		} else {
			return s;
		}
	}
	static normalize(stack,skipItems) {
		if(skipItems == null) {
			skipItems = 0;
		}
		if(Array.isArray(stack) && skipItems > 0) {
			return stack.slice(skipItems);
		} else if(typeof(stack) == "string") {
			switch(stack.substring(0,6)) {
			case "Error\n":case "Error:":
				++skipItems;
				break;
			default:
			}
			return haxe_NativeStackTrace.skipLines(stack,skipItems);
		} else {
			return stack;
		}
	}
	static skipLines(stack,skip,pos) {
		if(pos == null) {
			pos = 0;
		}
		while(true) if(skip > 0) {
			pos = stack.indexOf("\n",pos);
			if(pos < 0) {
				return "";
			} else {
				skip = --skip;
				pos += 1;
				continue;
			}
		} else {
			return stack.substring(pos);
		}
	}
}
haxe_NativeStackTrace.__name__ = true;
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
		this.__skipStack++;
	}
}
haxe_ValueException.__name__ = true;
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
	static kvIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			let k = keys[idx - 1];
			return { key : k, value : h[k]};
		}};
	}
}
haxe_ds_StringMap.__name__ = true;
class haxe_http_HttpBase {
	constructor(url) {
		this.url = url;
		this.headers = [];
		this.params = [];
		this.emptyOnData = $bind(this,this.onData);
	}
	setParameter(name,value) {
		let _g = 0;
		let _g1 = this.params.length;
		while(_g < _g1) {
			let i = _g++;
			if(this.params[i].name == name) {
				this.params[i] = { name : name, value : value};
				return;
			}
		}
		this.params.push({ name : name, value : value});
	}
	addParameter(name,value) {
		this.params.push({ name : name, value : value});
	}
	onData(data) {
	}
	onBytes(data) {
	}
	onError(msg) {
	}
	onStatus(status) {
	}
	hasOnData() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	success(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	get_responseData() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
}
haxe_http_HttpBase.__name__ = true;
class haxe_http_HttpNodeJs extends haxe_http_HttpBase {
	constructor(url) {
		super(url);
	}
	request(post) {
		this.responseAsString = null;
		this.responseBytes = null;
		let parsedUrl = js_node_Url.parse(this.url);
		let _gthis = this;
		let secure = parsedUrl.protocol == "https:";
		let host = parsedUrl.hostname;
		let path = parsedUrl.path;
		let port = parsedUrl.port != null ? Std.parseInt(parsedUrl.port) : secure ? 443 : 80;
		let h = { };
		let _g = 0;
		let _g1 = this.headers;
		while(_g < _g1.length) {
			let i = _g1[_g];
			++_g;
			let arr = Reflect.field(h,i.name);
			if(arr == null) {
				arr = [];
				h[i.name] = arr;
			}
			arr.push(i.value);
		}
		if(this.postData != null || this.postBytes != null) {
			post = true;
		}
		let uri = null;
		let _g2 = 0;
		let _g3 = this.params;
		while(_g2 < _g3.length) {
			let p = _g3[_g2];
			++_g2;
			if(uri == null) {
				uri = "";
			} else {
				uri += "&";
			}
			let s = p.name;
			let uri1 = encodeURIComponent(s) + "=";
			let s1 = p.value;
			uri += uri1 + encodeURIComponent(s1);
		}
		let question = path.split("?").length <= 1;
		if(uri != null) {
			path += (question ? "?" : "&") + uri;
		}
		let opts = { protocol : parsedUrl.protocol, hostname : host, port : port, method : post ? "POST" : "GET", path : path, headers : h};
		let httpResponse = function(res) {
			res.setEncoding("binary");
			let s = res.statusCode;
			if(s != null) {
				_gthis.onStatus(s);
			}
			let data = [];
			res.on("data",function(chunk) {
				data.push(js_node_buffer_Buffer.from(chunk,"binary"));
			});
			res.on("end",function(_) {
				let buf = data.length == 1 ? data[0] : js_node_buffer_Buffer.concat(data);
				let httpResponse = buf.buffer.slice(buf.byteOffset,buf.byteOffset + buf.byteLength);
				_gthis.responseBytes = haxe_io_Bytes.ofData(httpResponse);
				_gthis.req = null;
				if(s != null && s >= 200 && s < 400) {
					_gthis.success(_gthis.responseBytes);
				} else {
					_gthis.onError("Http Error #" + s);
				}
			});
		};
		this.req = secure ? js_node_Https.request(opts,httpResponse) : js_node_Http.request(opts,httpResponse);
		if(post) {
			if(this.postData != null) {
				this.req.write(this.postData);
			} else if(this.postBytes != null) {
				this.req.setHeader("Content-Length","" + this.postBytes.length);
				this.req.write(js_node_buffer_Buffer.from(this.postBytes.b.bufferValue));
			}
		}
		this.req.end();
	}
}
haxe_http_HttpNodeJs.__name__ = true;
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		let s = "";
		let b = this.b;
		let i = pos;
		let max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				let c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					let code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					let code = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else {
					let u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				let c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	static ofData(b) {
		let hb = b.hxBytes;
		if(hb != null) {
			return hb;
		}
		return new haxe_io_Bytes(b);
	}
}
haxe_io_Bytes.__name__ = true;
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let n = e.__constructs__[o._hx_index];
				let con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true;
var js_node_Fs = require("fs");
var js_node_Http = require("http");
var js_node_Https = require("https");
var js_node_Url = require("url");
var js_node_buffer_Buffer = require("buffer").Buffer;
class sys_FileSystem {
	static exists(path) {
		try {
			js_node_Fs.accessSync(path);
			return true;
		} catch( _g ) {
			return false;
		}
	}
}
sys_FileSystem.__name__ = true;
class steam_Steam {
	static getSteamStats(key,bot) {
		try {
			let first = false;
			if(steam_Steam.mods == null) {
				steam_Steam.mods = { };
				first = true;
			}
			bot.channels.fetch("704748213655175300").then(function(c) {
				let channel = c;
				steam_Steam.processMods(key,function(o) {
					if(first) {
						steam_Steam.mods[o.publishedfileid] = { title : o.title, subs : o.subscriptions, votes_up : o.vote_data.votes_up, votes_down : o.vote_data.votes_up};
					} else {
						let prev = steam_Steam.mods[o.publishedfileid];
						if(prev == null) {
							steam_Steam.mods[o.publishedfileid] = { title : o.title, subs : o.subscriptions, votes_up : o.vote_data.votes_up, votes_down : o.vote_data.votes_up};
							steam_Steam.getUserName(key,o.creator,function(d) {
								channel.send("New Mod release on Steam **" + o.title + ("** by " + d.name + "!") + "\n" + ("https://steamcommunity.com/sharedfiles/filedetails/?id=" + o.publishedfileid));
							});
						} else if(o.subscriptions > prev.subs) {
							let _g = 0;
							let _g1 = steam_Steam.subMilestones;
							while(_g < _g1.length) {
								let m = _g1[_g];
								++_g;
								if(o.subscriptions >= m.milestone && prev.subs < m.milestone) {
									steam_Steam.getUserName(key,o.creator,function(d) {
										channel.send(StringTools.replace(StringTools.replace(m.messages[m.messages.length * Math.random() | 0],"{UNAME}",d.name),"{MODNAME}",o.title) + "\n" + ("https://steamcommunity.com/sharedfiles/filedetails/?id=" + o.publishedfileid));
									});
								}
							}
							prev.subs = o.subscriptions;
						}
					}
				},function() {
					try {
						js_node_Fs.writeFileSync("steam.json",JSON.stringify(steam_Steam.mods));
					} catch( _g ) {
						let e = haxe_Exception.caught(_g);
						console.log("steam/Steam.hx:110:","Exception while saving steam mod data\n" + e.details());
					}
				},function(e) {
					console.log("steam/Steam.hx:112:","Error in Steam.processMods for Steam.getSteamStats");
					e.trace();
				});
			}).catch(function(e) {
				console.log("steam/Steam.hx:117:","Error in Steam.getSteamStats\n" + Std.string(e));
			});
		} catch( _g ) {
			let e = haxe_Exception.caught(_g);
			console.log("steam/Steam.hx:121:","Exception in Steam.getSteamStats\n" + e.details());
		}
	}
	static processMods(key,handle,done,err,params) {
		let error = function(type,message,exception,pos) {
			if(err == null) {
				new steam_SteamError(type,message,exception,pos).trace();
			} else {
				err(new steam_SteamError(type,message,exception,pos));
			}
		};
		if(key == null) {
			error(steam_SteamErrorType.Other,"Key is null",null,{ fileName : "steam/Steam.hx", lineNumber : 134, className : "steam.Steam", methodName : "processMods"});
			return;
		}
		let req = new haxe_http_HttpNodeJs("https://api.steampowered.com" + "/IPublishedFileService/QueryFiles/" + "v1" + "/");
		req.setParameter("key",key);
		req.setParameter("format","json");
		req.setParameter("creator_appid","876650");
		req.setParameter("return_vote_data","true");
		req.setParameter("return_metadata","true");
		req.onData = function(d) {
			try {
				let total = Std.string(JSON.parse(d).response.total);
				req.setParameter("numperpage",total);
				if(params != null) {
					let _g = haxe_ds_StringMap.kvIterator(params.h);
					while(_g.hasNext()) {
						let _g1 = _g.next();
						let value = _g1.value;
						if(value != null) {
							req.addParameter(_g1.key,value);
						}
					}
				}
				req.onData = function(d) {
					try {
						let data = JSON.parse(d);
						if(data.response.publishedfiledetails != null) {
							let _g = 0;
							let _g1 = data.response.publishedfiledetails;
							while(_g < _g1.length) handle(_g1[_g++]);
						}
						if(done != null) {
							done();
						}
					} catch( _g ) {
						let _g1 = haxe_Exception.caught(_g);
						error(steam_SteamErrorType.Exception,_g1.get_message(),_g1,{ fileName : "steam/Steam.hx", lineNumber : 165, className : "steam.Steam", methodName : "processMods"});
					}
				};
				req.onError = function(e) {
					error(steam_SteamErrorType.HttpError,e,null,{ fileName : "steam/Steam.hx", lineNumber : 169, className : "steam.Steam", methodName : "processMods"});
				};
				req.request();
			} catch( _g ) {
				let _g1 = haxe_Exception.caught(_g);
				error(steam_SteamErrorType.Exception,_g1.get_message(),_g1,{ fileName : "steam/Steam.hx", lineNumber : 172, className : "steam.Steam", methodName : "processMods"});
			}
		};
		req.onError = function(e) {
			error(steam_SteamErrorType.HttpError,e,null,{ fileName : "steam/Steam.hx", lineNumber : 175, className : "steam.Steam", methodName : "processMods"});
		};
		req.request();
	}
	static getUserName(key,id,cb,err) {
		let error = function(type,message,exception,pos) {
			if(err == null) {
				new steam_SteamError(type,message,exception,pos).trace();
			} else {
				err(new steam_SteamError(type,message,exception,pos));
			}
		};
		let data = { };
		let req = new haxe_http_HttpNodeJs("https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/");
		req.setParameter("key",key);
		req.setParameter("steamids",id);
		req.setParameter("format","json");
		req.onData = function(s) {
			try {
				data = JSON.parse(s);
				cb({ name : data.response.players[0].personaname, avatar : data.response.players[0].avatar});
			} catch( _g ) {
				let _g1 = haxe_Exception.caught(_g);
				error(steam_SteamErrorType.Exception,_g1.get_message(),_g1,{ fileName : "steam/Steam.hx", lineNumber : 199, className : "steam.Steam", methodName : "getUserName"});
			}
		};
		req.onError = function(e) {
			error(steam_SteamErrorType.HttpError,e,null,{ fileName : "steam/Steam.hx", lineNumber : 203, className : "steam.Steam", methodName : "getUserName"});
		};
		req.request();
	}
	static main() {
		let first = false;
		steam_Steam.processMods(JSON.parse(js_node_Fs.readFileSync("auth.json",{ encoding : "utf8"})).steam_key,function(d) {
			if(!first) {
				first = true;
				console.log("steam/Steam.hx:214:",d);
			}
		});
	}
}
steam_Steam.__name__ = true;
class steam_SteamError {
	constructor(type,message,exception,pos) {
		this.type = type;
		this.message = message;
		this.exception = exception;
		this.pos = pos;
	}
	toString() {
		switch(this.type._hx_index) {
		case 0:
			return "" + this.message + " at " + Std.string(this.pos);
		case 1:
			if(this.exception != null) {
				return "SteamError : Exception \"" + this.exception.get_message() + "\" caught at " + Std.string(this.pos) + "\nStack : " + haxe_CallStack.toString(this.exception.get_stack());
			} else {
				return "SteamError : Unknown error at " + Std.string(this.pos);
			}
			break;
		case 2:
			return "SteamError : " + this.message + " at " + Std.string(this.pos);
		}
	}
	trace() {
		console.log(this.toString());
	}
}
steam_SteamError.__name__ = true;
var steam_SteamErrorType = $hxEnums["steam.SteamErrorType"] = { __ename__ : true, __constructs__ : ["HttpError","Exception","Other"]
	,HttpError: {_hx_index:0,__enum__:"steam.SteamErrorType",toString:$estr}
	,Exception: {_hx_index:1,__enum__:"steam.SteamErrorType",toString:$estr}
	,Other: {_hx_index:2,__enum__:"steam.SteamErrorType",toString:$estr}
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
if(sys_FileSystem.exists("steam.json")) {
	let m = js_node_Fs.readFileSync("steam.json",{ encoding : "utf8"});
	let tmp;
	try {
		tmp = JSON.parse(m);
	} catch( _g ) {
		tmp = { };
	}
	steam_Steam.mods = tmp;
}
module.exports = steam_Steam;
steam_Steam.BASE = "https://api.steampowered.com";
steam_Steam.VERSION = "v1";
steam_Steam.CHANNEL = "704748213655175300";
steam_Steam.subMilestones = [{ milestone : 50, messages : ["Wow! You must be so popular {UNAME}! {MODNAME} just hit 50 subscribers on Steam!"]},{ milestone : 100, messages : ["{UNAME} made {MODNAME} so well that 100 people subscribed to it on Steam!"]},{ milestone : 200, messages : ["I bet you did not expect {MODNAME} to get 200 subscribers on Steam, did you {UNAME}?"]},{ milestone : 300, messages : ["{MODNAME}? {MODNAME}? THIS! IS! SPARTA!\n\n(You just got 300 ~~warriors~~ subscribers on Steam, {UNAME})!"]},{ milestone : 400, messages : ["Pop the champagne! Roll out the red carpet! There is a new star on Steam - it's {UNAME} and his {MODNAME} with 400 subs!!"]},{ milestone : 500, messages : ["Impossible! The readings are off the chart, {UNAME}! {MODNAME} is at 500 subscribers on Steam ... how is that possible?!"]}];
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
