// Generated by Haxe 4.1.4
(function ($global) { "use strict";
class HxOverrides {
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = true;
Math.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
}
Std.__name__ = true;
var discordjs_MessageEmbed = require("discord.js").MessageEmbed;
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
}
haxe_ds_StringMap.__name__ = true;
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true;
var steam_Cmd = require("../command.js");
class steam_SteamCommand extends steam_Cmd {
	constructor() {
		super("Steam Mod",["steammod","smod","steam-mod"],1);
	}
	runInternal(msg,args) {
		let arr = [];
		let _gthis = this;
		let search = args.slice(1).join(" ").toLowerCase();
		let _g = new haxe_ds_StringMap();
		_g.h["search_text"] = search;
		steam_SteamCommand.processMods(this.auth.steam_key,function(d) {
			let title = d.title.toLowerCase();
			if(title.indexOf(search) != -1 || title == search) {
				arr.push(d);
			}
		},function() {
			if(arr.length == 0) {
				msg.channel.send("There are no mods matching your search");
			} else if(arr.length > 1) {
				let msg1 = msg.channel;
				let _g = [];
				let _g1 = 0;
				while(_g1 < arr.length) _g.push(arr[_g1++].title);
				msg1.send("There are multiple mods matching your search : \n" + _g.join("\n"));
			} else {
				let embed = new discordjs_MessageEmbed();
				embed.setDescription(HxOverrides.substr(arr[0].file_description,0,244));
				embed.setTitle(arr[0].title);
				embed.setImage(arr[0].preview_url);
				embed.setColor("BLUE");
				embed.setURL("https://steamcommunity.com/sharedfiles/filedetails/?id=" + Std.string(arr[0].publishedfileid));
				embed.addField("Stats","Votes : + " + Std.string(arr[0].vote_data.votes_up) + " / - " + Std.string(arr[0].vote_data.votes_down) + "\n" + ("Subscriptions : " + Std.string(arr[0].subscriptions)));
				steam_SteamCommand.getUserName(_gthis.auth.steam_key,arr[0].creator,function(d) {
					embed.setAuthor(d.name,d.avatar);
					msg.channel.send(embed);
				});
			}
		},function(e) {
			msg.channel.send("Something went wrong while executing your command!");
			console.log("steam/SteamCommand.hx:47:","Error in Steam.processMods for SteamCommand");
			e.trace();
		},_g);
	}
	help() {
		return "Returns information about a mod from the steam workshop. \n Usage : `]smod Mod Name`.";
	}
	shortHelp() {
		return "info about a mod on steam";
	}
}
steam_SteamCommand.__name__ = true;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
module.exports = steam_SteamCommand;
steam_SteamCommand.processMods = require("../services/steam.js").processMods;
steam_SteamCommand.getUserName = require("../services/steam.js").getUserName;
})({});
